% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setResourceLogistic.R
\name{setResourceLogistic}
\alias{setResourceLogistic}
\title{Set logistic resource dynamics without changing the steady state}
\usage{
setResourceLogistic(params, resource_rate, resource_capacity, resource_level)
}
\arguments{
\item{params}{A MizerParams object}

\item{resource_rate}{Optional. Vector of resource intrinsic birth rates.
Must be strictly positive.}

\item{resource_capacity}{Optional. Vector of resource intrinsic carrying
capacities.}

\item{resource_level}{Optional. Vector with the ratio between the current
resource number density and the resource capacity. Must be strictly
between 0 and 1, except at sizes where the resource is zero, where it can
be \code{NaN}.}
}
\value{
A MizerParams object with updated resource rate and resource
capacity.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Turns on logistic resource dynamics and
sets the resource capacity and the resource rate in such a way that at the
current abundances the resource replenishes as quickly as it is consumed.
Hence if you have tuned your \code{params} object to describe a particular steady
state, then setting the resource parameters with this function will leave you
with the exact same steady state.
}
\details{
This function sets the resource dynamics to use \code{resource_logistic()}.
This means that the resource rate \eqn{r_R} and the resource capacity
\eqn{c_R} enter the equation for the resource abundance density \eqn{N_R} as
\deqn{\frac{\partial N_R(w,t)}{\partial t} = r_R(w) N_R(w)\Big[ 1 - \frac{N_R(w,t)}{c_R (w)} \Big] - \mu_R(w, t) N_R(w,t)}{dN_R(w,t)/d t  = r_R(w) N_r(w)( 1 - N_R(w,t) / c_R (w)) - \mu_R(w,t ) N_R(w,t)}
where the mortality \eqn{\mu_R(w, t)} is
due to predation by consumers and is calculate with \code{\link[=getResourceMort]{getResourceMort()}}.

Because of the requirement that the resource is replenished at the same rate
at which it is consumed, there is only one free parameter left to be chosen.
Therefore you should provide at most one of the three resource arguments
\code{resource_rate}, \code{resource_capcacity} or \code{resource_level}.

The argument be either a vector with the same length as \code{w_full(params)},
giving a value for every size class, or it can be a single value that is
taken as the value at 1g. This is then completed to a vector of values for
all sizes as follows:
\itemize{
\item The \code{resource_rate} argument is completed to a power law with exponent
\code{n-1} where \code{n} is taken from the \code{\link[=resource_params]{resource_params()}} list.
\item The \code{resource_capacity} argument is completed to a power low with exponent
\code{-lambda}, with \code{lamba} taken from the \code{\link[=resource_params]{resource_params()}} list. The
resulting values must be larger than the current resource number density,
otherwise an error is raised.
\item The \code{resource_level} argument is completed to the same value at all sizes.
It must be a number strictly between 0 and 1.
}

You can change the exponents \code{n} and \code{lambda} using \code{\link[=resource_params]{resource_params()}}.

You can however set up different resource dynamics with
\code{\link[=resource_dynamics<-]{resource_dynamics<-()}}.
}
\seealso{
Other resource parameters: 
\code{\link{resource_dynamics}()},
\code{\link{resource_params}()},
\code{\link{setResourceSemichemostat}()}
}
\concept{resource parameters}
